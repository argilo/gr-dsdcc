/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(dsdcc_block.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(0826eda9718dae530649110af6e04c31)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dsdcc/dsdcc_block.h>
// pydoc.h is automatically generated in the build directory
#include <dsdcc_block_pydoc.h>

void bind_dsdcc_block(py::module& m)
{

    using dsdcc_block    = gr::dsdcc::dsdcc_block;


    py::class_<dsdcc_block,
        gr::block,
        gr::basic_block,
        std::shared_ptr<dsdcc_block>>(m, "dsdcc_block", D(dsdcc_block))

        .def(py::init(&dsdcc_block::make),
           py::arg("mode"),
           D(dsdcc_block,make)
        )




        ;

    py::enum_<::gr::dsdcc::DSDDecodeMode>(m,"dsd_decode_mode")
        .value("DSDDecodeAuto", ::gr::dsdcc::DSDDecodeAuto) // 0
        .value("DSDDecodeNone", ::gr::dsdcc::DSDDecodeNone) // 1
        .value("DSDDecodeP25P1", ::gr::dsdcc::DSDDecodeP25P1) // 2
        .value("DSDDecodeDStar", ::gr::dsdcc::DSDDecodeDStar) // 3
        .value("DSDDecodeNXDN48", ::gr::dsdcc::DSDDecodeNXDN48) // 4
        .value("DSDDecodeNXDN96", ::gr::dsdcc::DSDDecodeNXDN96) // 5
        .value("DSDDecodeProVoice", ::gr::dsdcc::DSDDecodeProVoice) // 6
        .value("DSDDecodeDMR", ::gr::dsdcc::DSDDecodeDMR) // 7
        .value("DSDDecodeX2TDMA", ::gr::dsdcc::DSDDecodeX2TDMA) // 8
        .value("DSDDecodeDPMR", ::gr::dsdcc::DSDDecodeDPMR) // 9
        .value("DSDDecodeYSF", ::gr::dsdcc::DSDDecodeYSF) // 10
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dsdcc::DSDDecodeMode>();



}
